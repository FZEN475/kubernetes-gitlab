

gitlab:
  sidekiq:
    # Default values for sidekiq.
    # This is a YAML-formatted file.
    # Declare variables to be passed into your templates.
    image: {}
      # pullPolicy: IfNotPresent
      # pullSecrets: []
      # repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
    # tag: master

    init:
      image: {}
        # repository:
        # tag:
      # pullPolicy: IfNotPresent
      resources: {}
#        requests:
#          cpu: 50m
      containerSecurityContext:
        runAsUser: 1000
        allowPrivilegeEscalation: false
        runAsNonRoot: true
        capabilities:
          drop: [ "ALL" ]

    # Node labels for pod assignment
    # nodeSelector: {}

    # Tolerations for pod scheduling
    tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"

    enabled: true

    annotations: {}
    podLabels: {}
    common:
      labels: {}

    logging:
      # set to "json" for json
      # structured logs
      format: "json"

    networkpolicy:
      enabled: false
      egress:
        enabled: false
        rules: []
      ingress:
        enabled: false
        rules: []
      annotations: {}

    metrics:
      enabled: true
      port: 3807
      path: /metrics
      log_enabled: true
      podMonitor:
        enabled: false
        additionalLabels: {}
        endpointConfig: {}
      # DEPRECATED
      annotations: {}
      tls:
        enabled: true
        secretName: cm-gitlab-tls

    health_checks:
      port: 3808

    redis:
      auth: {}

    psql: {}
    # port: 5432

    # https://docs.gitlab.com/ee/administration/operations/sidekiq_memory_killer.html#sidekiq-memorykiller
    memoryKiller:
      daemonMode: true
      maxRss: 2000000
      graceTime: 900
      shutdownWait: 30
      checkInterval: 10
      #hardLimitRss: 3000000

    livenessProbe:
      initialDelaySeconds: 500
      periodSeconds: 60
      timeoutSeconds: 30
      successThreshold: 1
      failureThreshold: 10
    readinessProbe:
      initialDelaySeconds: 500
      periodSeconds: 10
      timeoutSeconds: 2
      successThreshold: 1
      failureThreshold: 10



    gitaly:
      # host: '0.0.0.0'
      # port: 8075
      # serviceName: 'gitaly'
      authToken: {}
      #   secret: gitaly-secret
      #   key: token
    minio:
      serviceName: 'minio-svc'
      port: 9000

    extra: {}

    ## Additional environment variables to set
    ## Note that these will be applied to every
    ##   container in the pod.
    extraEnv: {}
    # extraEnv:
    #   SOMEKEY: SOMEVALUE
    #   SOMEKEY2: SOMEVALUE2

    rack_attack:
      git_basic_auth:
        enabled: false
        # enabled: true
        # ip_whitelist: ["127.0.0.1"]
        # maxretry: 10
        # findtime: 60
        # bantime: 3600

    trusted_proxies: []

    # Global defaults
    minReplicas: 1
    maxReplicas: 1
    concurrency: 20

    # `deployment.strategy` is utilized to configure the desired upgrade approach and
    # configuration for the deployment.  See the Kubernetes documentation
    # related to this subject.
    # https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    deployment:
      strategy: {}
      terminationGracePeriodSeconds: 30

    hpa:
      # targetAverageValue: 350m  # DEPRECATED: in favor of `hpa.cpu.targetAverageValue` below
      cpu:
        targetType: AverageValue  # Utilization or AverageValue
        targetAverageValue: 350m
        # targetAverageUtilization: 75
      # memory:
      #   targetType: Utilization  # Utilization or AverageValue
      #   targetAverageValue: 1G
      #   targetAverageUtilization: 75
      # Note that the HPA is limited to autoscaling/v2beta1, autoscaling/v2beta2 and autoscaling/v2
      customMetrics: []  # Overrides HPA metrics definition
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300

    keda:
      enabled: false
      ## See https://keda.sh/docs/2.10/concepts/scaling-deployments/#scaledobject-spec
      pollingInterval: 30
      cooldownPeriod: 300
      # minReplicaCount: 2
      # maxReplicaCount: 10
      # fallback:
      #   failureThreshold: 3
      #   replicas: 6
      # hpaName: keda-hpa-{scaled-object-name}
      # restoreToOriginalReplicaCount: false
      # behavior: {}
      # triggers: []

    timeout: 30
    resources:
#      limits:
#        cpu: 1
#        memory: 4G
      requests:
        cpu: 1
        memory: 1Gi
    maxUnavailable: 1

    # Define queue groups into Pods
    pods:
      - name: all-in-1
        # concurrency: 20
        # memoryKiller:
        #   maxRss: 2000000
        #   graceTime: 900
        #   shutdownWait: 30
        #   checkInterval: 3
#        minReplicas: 1
#        maxReplicas: 1
#        # strategy: {}
#        # queues: ''
#        # extraVolumes
#        # extraVolumeMounts
#        # priorityClassName: ""
#        hpa:
#          minReplicas: 1
#          maxReplicas: 1
        #   cpu:
        #     targetType: AverageValue
        #     targetAverageValue:
        #     targetAverageUtilization:
        #   memory:
        #     targetType: AverageValue
        #     targetAverageValue:
        #     targetAverageUtilization:
        #   customMetrics: []
        #   behavior:
        #     scaleDown:
        #       stabilizationWindowSeconds:
        # keda:
        #   enabled: false
        #   ## See https://keda.sh/docs/2.10/concepts/scaling-deployments/#scaledobject-spec
        #   pollingInterval: 30
        #   cooldownPeriod: 300
        #   minReplicaCount: 2
        #   maxReplicaCount: 10
        #   fallback:
        #     failureThreshold: 3
        #     replicas: 6
        #   hpaName: keda-hpa-{scaled-object-name}
        #   restoreToOriginalReplicaCount: false
        #   behavior: {}
        #   triggers: []
        #
        # common:
        #   labels: {}
        # podLabels: {}
        # terminationGracePeriodSeconds: 30
        # nodeSelector: {}
        # tolerations: []

    ## Allow to overwrite under which User and Group the Pod will be running.
    securityContext:
      runAsUser: 1000
      fsGroup: 1000
      # fsGroupChangePolicy: OnRootMismatch
      seccompProfile:
        type: "RuntimeDefault"

    ## Allow to overwrite the specific security context under which the container is running.
    containerSecurityContext:
      runAsUser: 1000
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      capabilities:
        drop: [ "ALL" ]

    ## Enable deployment to use a serviceAccount
    serviceAccount:
      enabled: false
      create: false
      annotations: {}
      ## Used for local override of global ServiceAccount token mounting
      # automountServiceAccountToken: false
      ## Name to be used for serviceAccount, otherwise defaults to chart fullname
      # name:

    ## Allow configuring pods' priorityClassName. This is used to control pod priority in case of eviction:
    #  https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    priorityClassName: ""

    affinity:
      podAntiAffinity:
        topologyKey:

minReplicas: 1
maxReplicas: 1