# Default values for gitaly.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  gitaly:
    enabled: true
    internal:
      names: ["default"]
    external: []
    authToken:
      secret: "gitaly-secrets"
      key: "token"
    hooks: {}
    tls:
      enabled: true
      secretName: "cm-gitlab-tls"


gitlab:
  gitaly:
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitaly
        # pullPolicy: IfNotPresent

        # tag: master
#    service:
#      externalPort: 8075
#      internalPort: 8075
#      tls:
#        externalPort: 8076
#        internalPort: 8076
#      type: ClusterIP
#      clusterIP: None

    annotations:
      reloader.stakater.com/auto: "true"

    extraInitContainers: |
      - name: test-init-cron
        image: alpine:latest
        command: ["/bin/ash", "-c", "/tmp/init.sh"]
        volumeMounts:
          - name: repo-data
            mountPath: /repo-data
          - name: backup
            mountPath: /backup
          - name: gitaly-backup-scripts
            mountPath: /tmp/backup.sh
            subPath: backup.sh

    extraContainers: |
      - name: cron-job
        image: alpine:latest
        command: ["/usr/sbin/crond", "-f"]
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: repo-data
            mountPath: /repo-data
          - name: backup
            mountPath: /backup/
          - name: gitaly-backup-scripts
            mountPath: /etc/periodic/hourly/backup
            subPath: backup.sh      

    extraVolumes: |
      - name: backup
        persistentVolumeClaim:
          claimName: gitaly-backup-pvc
      - name: gitaly-backup-scripts
        configMap:
          defaultMode: 720
          name: gitaly-backup-scripts
          items:
          - key: init.sh
            path: init.sh
          - key: backup.sh
            path: backup.sh

    common:
      labels: {}
    podLabels: {}
    serviceLabels: {}

    shareProcessNamespace: false

    init:
      image: {}
      # repository:
      # tag:
      resources: {}
      #        requests:
      #          cpu: 250m
      containerSecurityContext:
        allowPrivilegeEscalation: false
        runAsNonRoot: true
        capabilities:
          drop: [ "ALL" ]

    # Gitaly built-in cgroups, spawns Git processes into a cgroup per repository, protecting the service/pod from OOM events
    # ref: https://docs.gitlab.com/ee/administration/gitaly/configure_gitaly.html#control-groups
    cgroups:
      enabled: false
      initContainer:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitaly-init-cgroups
        securityContext:
          runAsUser: 0
          runAsGroup: 0
      mountpoint: '{% file.Read "/etc/gitlab-secrets/gitaly-pod-cgroup" | strings.TrimSpace %}'
      hierarchyRoot: gitaly
      # memoryBytes:
      # cpuShares:
      # cpuQuotaUs:
      repositories: {}
        # count:
        # memoryBytes:
        # cpuShares:
        # cpuQuotaUs:
      # maxCgroupsPerRepo:

    ## Support for tolerations for pod scheduling
    tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"

    ## The Gitaly StatefulSet's priorityClassName
    # priorityClassName:

    # Gitaly shutdown grace period, how long to wait for in-flight requests to complete (seconds)
    # Pod `terminationGracePeriodSeconds` is set to this value + 5 seconds
    gracefulRestartTimeout: 25

    logging:
      format: "json"
      level: "warn"
      # level:
      # sentryDsn:
      # sentryEnvironment:

    git: {}
      # catFileCacheSize:
      ## Amend the default configuration Gitaly is using when spawning Git
      ## commands. Accepts configuration as documented in git-config(1).
      # config:
      #   - {key: "pack.threads", value: 4}

    prometheus: {}
    # grpcLatencyBuckets: "[1.0, 1.5, 2.0, 2.5]"

    workhorse: {}
      # by default, Workhorse is a part of the Webservice Pods / Service
      # scheme: 'http'
      # host: '0.0.0.0'
      # serviceName: 'webservice'
    # port: 8181
    shell:
      authToken: {}
      concurrency: []
        # - rpc: "/gitaly.SmartHTTPService/PostUploadPack"
        #   maxPerRepo: 20
        # - rpc: "/gitaly.SSHService/SSHUploadPack"
        #   maxPerRepo: 20

    metrics:
      enabled: true
      port: 9236
      path: /metrics
      serviceMonitor:
        enabled: false
        additionalLabels: { }
        endpointConfig: { }




    persistence:
      enabled: false
      storageClass: "nfs-client"
      accessMode: ReadWriteOnce
      size: 10Gi
      subPath: ""
      matchLabels: {}
      matchExpressions: []
      annotations:
        nfs.io/storage-path: "gitaly_data"
      labels: {}

    resources:
      #      limits:
      #        cpu: 500m
      #        memory: 512Mi
      requests:
        cpu: 500m
        memory: 512Mi

    ## For PodDisruptionBudget, how many pods can be unavailable at one time
    maxUnavailable: 1

    ## Allow to overwrite under which User and Group Pod will be running.
    securityContext:
      runAsUser: 1000
      fsGroup: 1000
      # fsGroupChangePolicy: OnRootMismatch

    ## Allow to overwrite the specific security context under which the gitaly container is running.
    containerSecurityContext:
      runAsUser: 1000
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      capabilities:
        drop: ["ALL"]

    ## Enable deployment to use a serviceAccount
    serviceAccount:
      enabled: false
      create: false
      annotations: {}
      ## Used for local override of global ServiceAccount token mounting
      # automountServiceAccountToken: false
      ## Name to be used for serviceAccount, otherwise defaults to chart fullname
      # name:

    statefulset:
      strategy: {}
      livenessProbe:
        initialDelaySeconds: 0
        periodSeconds: 10
        timeoutSeconds: 3
        successThreshold: 1
        failureThreshold: 3
      readinessProbe:
        initialDelaySeconds: 0
        periodSeconds: 5
        timeoutSeconds: 3
        successThreshold: 1
        failureThreshold: 3
      startupProbe:
        enabled: true
        initialDelaySeconds: 1
        periodSeconds: 1
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 60

    affinity:
      podAntiAffinity:
        topologyKey:
      nodeAffinity:
        key:
        values:

    ## Enable the Gitaly pack-objects cache
    ## ref: https://docs.gitlab.com/ee/administration/gitaly/configure_gitaly.html#pack-objects-cache
    packObjectsCache: {}
    #  enabled: false
    #  dir: "/home/git/repositories/+gitaly/PackObjectsCache"
    #  max_age: 5m

    ## Enable Gitaly to GPG sign all commits created by GitLab
    ## ref: https://docs.gitlab.com/ee/administration/gitaly/configure_gitaly.html#configure-commit-signing-for-gitlab-ui-commits
    gpgSigning: {}
      # enabled: false
    # secret: glGPG
    # key:

    backup: {}
      # goCloudUrl:
    # default enable gomemlimit to avoid gc related OOM errors
    gomemlimit:
      enabled: true



























## Support for tolerations for pod scheduling
tolerations: []

## The Gitaly StatefulSet's priorityClassName
# priorityClassName:





prometheus: {}
# grpcLatencyBuckets: "[1.0, 1.5, 2.0, 2.5]"




## Enable prometheus metrics and set the port to scrape the
## container on.


## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##







